import { Queue, Worker, Job } from 'bullmq';
import axios from 'axios';


const redisConnection = {
  host: process.env.REDIS_HOST || 'redis',
  port: Number(process.env.REDIS_PORT || '6379'),
  // maxRetriesPerRequest: null, // só se tiver erro de BullMQ travando
};

// Criação da fila (Queue)
export const notificationQueue = new Queue('notifications', { connection: redisConnection });

// Worker: processa jobs da fila
export const notificationWorker = new Worker(
  'notifications',
  async (job: Job) => {
    const { task } = job.data;
    console.log('[Worker] Processando tarefa para webhook:', task.webhookUrl, 'em', new Date().toISOString());
    try {
      await axios.post(
        task.webhookUrl,
        {
          taskId: task.id,
          title: task.title,
          description: task.description,
          executeAt: task.executeAt,
        },
        { timeout: 10000 }
      );
      console.log('[Notificação] Webhook enviado para:', task.webhookUrl);
    } catch (err: any) {
      console.error('[Notificação] Falha ao enviar webhook para', task.webhookUrl, ':', err?.message);
      throw err;
    }
  },
  { connection: redisConnection }
);

// Logs de eventos do worker
notificationWorker.on('completed', job => {
  console.log(`[Worker] Job ${job.id} processado com sucesso`);
});
notificationWorker.on('failed', (job, err) => {
  console.error(`[Worker] Job ${job?.id} falhou:`, err?.message);
});
